from gmpy2 import isqrt_rem, isqrt, mpz, invert, powmod, to_binary
from lib import unhex

def calc_smallest(A, N):
  x = isqrt(A*A - N)
  p = A - x
  q = A + x 
  check = p*q == N
  
  return (check, p, q)

# Q1
print("Q1")
N1 = mpz("179769313486231590772930519078902473361797697894230657273430081157732675805505620686985379449212982959585501387537164015710139858647833778606925583497541085196591615128057575940752635007475935288710823649949940771895617054361149474865046711015101563940680527540071584560878577663743040086340742855278549092581")

(A1, t) = isqrt_rem(N1)
if (t > 0):
  A1 += 1

(chk, p1, q1) = calc_smallest(A1, N1)
if chk: 
    print("smaller: ", p1)

# Q2
print("Q2")
N2 = mpz("648455842808071669662824265346772278726343720706976263060439070378797308618081116462714015276061417569195587321840254520655424906719892428844841839353281972988531310511738648965962582821502504990264452100885281673303711142296421027840289307657458645233683357077834689715838646088239640236866252211790085787877")

sqrtN = isqrt(N2)
for i in range(1, 2**20):
  (check, p2, q2) = calc_smallest(sqrtN + i, N2) 
  if check:
    print("smaller: ", p2)
    break

# Q3
print("Q3")
N3 = mpz("720062263747350425279564435525583738338084451473999841826653057981916355690188337790423408664187663938485175264994017897083524079135686877441155132015188279331812309091996246361896836573643119174094961348524639707885238799396839230364676670221627018353299443241192173812729276147530748597302192751375739387929")
A3 = isqrt(6 * N3)
for i in range(1, 2**10):
  Ap = A3 + i
  x = isqrt(Ap*Ap - 6 * N3)
  p = (A3 - x) // 3
  q = (A3 + x) // 2
  check = p*q == N3
  if check:
    print("smaller: ", p)
    break



# Q4
ciphertext = mpz("22096451867410381776306561134883418017410069787892831071731839143676135600120538004282329650473509424343946219751512256465839967942889460764542040581564748988013734864120452325229320176487916666402997509188729971690526083222067771600019329260870009579993724077458967773697817571267229951148662959627934791540")

phiN = (p1 - 1) * (q1 - 1)
sk = invert(65537, phiN)
if sk == 0:
  raise Exception("Invalid")
  
plain = powmod(ciphertext, sk, N1)
plain_bytes = to_binary(plain)
plain_bytes = bytes([x for x in reversed(plain_bytes)])
print("plaintext: ", plain_bytes)












